plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	// Version List: https://projects.neoforged.net/neoforged/ModDevGradle
	id 'net.neoforged.moddev' version '0.1.126'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
	secretsFile.withInputStream {
		stream -> secrets.load(stream)
	}

	fileTree("secrets").matching {
		include "**/*.properties"
	}.each {
		File file ->
			file.withInputStream {
				stream -> secrets.load(stream)
			}
	}
}

idea {
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

version = (hasProperty("CIRevision") ? CIRevision : project.mod_version)
group = group_name

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(21))
	}
}

compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation,-this-escape" << "-Werror"

base {
	archivesName = "${project.mod_id}-${project.minecraft_version}"
}

subprojects {
	version = project(":").version
	group = project(":").group
}

neoForge {
	version = project.neo_version

	validateAccessTransformers = true

	mods {
		twilightforest {
			sourceSet sourceSets.main
		}

		'tf-asm' {
			dependency project(":tf-asm")
		}
	}

	unitTest {
		enable()
		testedMod = mods.twilightforest
		project.afterEvaluate {
			idea {
				project {
					settings {
						runConfigurations {
							defaults(org.jetbrains.gradle.ext.JUnit) {
								workingDirectory = project.file("build/minecraft-junit").canonicalPath
							}
						}
					}
				}
			}
		}
	}

	runs {
		configureEach {
			gameDirectory = project.file('run')
			systemProperty 'forge.logging.console.level', 'debug'
			systemProperty 'fml.earlyprogresswindow', 'false'
			systemProperty 'mixin.env.disableRefMap', 'true'
		}

		client {
			client()
			systemProperty 'forge.enabledGameTestNamespaces', mod_id
			programArguments.addAll '--username', secrets.getProperty("username") ?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid") ?: ''
		}

		server {
			server()
			systemProperty 'forge.enabledGameTestNamespaces', mod_id
			programArgument '--nogui'
		}

		data {
			data()
			gameDirectory = project.file('run-data')
			programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}
	}
}

jar {
	exclude 'data/twilightforest/functions/**'
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	mavenLocal()
	maven {
		name 'Jared\'s Maven' // JEI
		url 'https://maven.blamejared.com/'
	}
	maven {
		name 'tterrag\'s Maven' // CTM
		url 'https://maven.tterrag.com/'
	}
	maven {
		name 'theillusivec4\'s Maven' // Curios
		url 'https://maven.theillusivec4.top/'
	}
	maven {
		name 'Tama\'s Maven' // Cross-Dim Commands
		url "https://maven.tamaized.com/releases"
	}
	maven {
		name 'Shedaniel\'s Maven' //REI
		url "https://maven.shedaniel.me"
	}
	maven {
		name = "TerraformersMC" //EMI
		url = "https://maven.terraformersmc.com/"
	}
	maven { // TOP
		url "https://maven.k-4u.nl"
	}
	maven {
		name 'Curseforge Maven' // Jade
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

dependencies {
	jarJar project(":tf-asm")

	//make sure to only pick one of these when testing (switch others to compileOnly)
	implementation "mezz.jei:jei-${project.minecraft_version}-neoforge:${project.jei_version}"
//	compileOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${project.rei_version}"
//	compileOnly "dev.emi:emi-neoforge:${project.emi_version}+${project.minecraft_version}"

	// theillusivec4
//	implementation "top.theillusivec4.curios:curios-neoforge:${project.curios_version}+${project.minecraft_version}"

	//curse maven
	implementation "curse.maven:jade-324717:5444008"
//	runtimeOnly "curse.maven:jeed-532286:4599236"
//	runtimeOnly "curse.maven:museum-curator-859070:4629894"

//	implementation  "mcjty.theoneprobe:theoneprobe:${project.top_version}"

	testImplementation group: 'net.neoforged', name: 'testframework', version: project.neo_version
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.10.3'
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.12.0'
	testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.12.0'
	testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.3'
}

test {
	useJUnitPlatform()
}

tasks.named('jar', Jar).configure {
	manifest {
		archiveClassifier = 'slim'
		attributes([
			'Specification-Title'     : mod_id,
			'Specification-Vendor'    : "TeamTwilight",
			'Specification-Version'   : "1",
			'Implementation-Title'    : project.name,
			'Implementation-Version'  : project.jar.archiveVersion,
			'Implementation-Vendor'   : "TeamTwilight",
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

tasks.named('jarJar') {
	//archiveClassifier = 'universal'
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			afterEvaluate {
				artifact source: project.tasks.jarJar.outputs.getFiles().getSingleFile(), classifier: 'universal'
				artifact project.sourceJar
			}
			setGroupId 'team-twilight'
			setArtifactId project.mod_id
		}
	}
	repositories {
		maven {
			//url "file:///${project.projectDir}/mcmodsrepo"
			url "https://maven.tamaized.com/releases"
			credentials {
				username System.getenv('ARTIFACTORY_USER')
				password System.getenv('ARTIFACTORY_PASS')
			}
		}
	}
}

tasks.register('sourceJar', Jar) {
	dependsOn 'classes'
	from sourceSets.main.allSource
	archiveClassifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
